<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# var typeList = new string [] {"T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8"}; #>
using System;
using System.Reflection;

namespace SharpLuna
{
    using static Lua;
    using lua_State = IntPtr;

    public struct FuncFactory<R>
    {
        public static Func<R> Create(IntPtr L, int index)
        {
            lua_pushvalue(L, index);
            int luaref = luaL_ref(L, LUA_REGISTRYINDEX);
            return () =>
            {
                lua_pushcfunction(L, LuaException.traceback);
                lua_rawgeti(L, LUA_REGISTRYINDEX, luaref);
                if (lua_pcall(L, 0, 0, 2) != (int)LuaStatus.OK)
                {
                    lua_remove(L, -2);
                    throw new LuaException(L);
                }
                Get(L, -1, out R ret);
                lua_pop(L, 2);
                return ret;
            };
        }

        [AOT.MonoPInvokeCallback(typeof(LuaNativeFunction))]
        public static int StaticCall(lua_State L) => Call(L);
        [AOT.MonoPInvokeCallback(typeof(LuaNativeFunction))]
        public static int Call(lua_State L)
        {         
            try
            {
                var a = ToLightObject<Func<R>>(L, lua_upvalueindex(1), false);
                var r = a();
                PushT(L, r);
                return 1;
            }
            catch (Exception e)
            {
                return luaL_error(L, e.Message);
            }
        }

        public static int CallDel(lua_State L, int start, Delegate del)
        {
            Func<R> a = (Func<R>)del;
            var r = a();
            PushT(L, r);
            return 1;
        }
    }

<# for(int i= 0; i< typeList.Length ; i ++){ #>
    public struct FuncFactory<<# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#>, <#}#>R>
    {      
        public static Func<<# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#>, <#}#>R> Create(IntPtr L, int index)
        {
            lua_pushvalue(L, index);
            int luaref = luaL_ref(L, LUA_REGISTRYINDEX);
            return (<# for(int j= 0; j <= i ; j ++){#><#=typeList[j].ToLower()#><#if(j != i)#>, <#}#>) =>
            {
                lua_pushcfunction(L, LuaException.traceback);
                lua_rawgeti(L, LUA_REGISTRYINDEX, luaref);
                <# for(int j= 0; j <= i ; j ++){#>Push(L, <#=typeList[j].ToLower()#>);
                <#}#>if (lua_pcall(L, <#=i#>, 0, -<#=i#> + 2) != (int)LuaStatus.OK)
                {
                    lua_remove(L, -2);
                    throw new LuaException(L);
                }
                Get(L, -1, out R ret);
                lua_pop(L, 2);
                return ret;
            };
        }

        [AOT.MonoPInvokeCallback(typeof(LuaNativeFunction))]
        public static int Call(lua_State L) => Call(L, 1);
        [AOT.MonoPInvokeCallback(typeof(LuaNativeFunction))]
        public static int StaticCall(lua_State L) => Call(L, 2);

        static int Call(lua_State L, int start)
        {
            try
            {
                var a = ToLightObject<Func<<# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#>, <#}#>R>>(L, lua_upvalueindex(1), false);
                return CallDel(L, start, a);
            }
            catch (Exception e)
            {
                return luaL_error(L, e.Message);
            }
        }

        public static int CallDel(lua_State L, int start, Delegate del)
        {
            var a = (Func<<# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#>, <#}#>R>)del;
<# for(int j= 0; j <= i ; j ++){#>
            GetT(L, <#=j#> + start, out <#=typeList[j]#> <#=typeList[j].ToLower()#>);
<#}#>
            var r = a(<# for(int j= 0; j <= i ; j ++){#><#=typeList[j].ToLower()#><#if(j != i)#>, <#}#>);
            PushT(L, r);
            return 1;
        }
    }

<# }#>

}
