<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# var typeList = new string [] {"T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8"}; #>
using System;
using System.Reflection;

namespace SharpLuna
{
    using static Lua;
    using lua_State = IntPtr;

    public delegate void RefAction();
<# for(int i= 0; i< typeList.Length ; i ++){ #>
    public delegate void RefAction<<# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#><#if(j != i)#>, <#}#>>(ref <# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#> <#=typeList[j].ToLower()#><#if(j != i)#>, <#}#>) where T1 : struct;
<# }#>

    public struct RefActionCaller
    {
        [AOT.MonoPInvokeCallback(typeof(LuaNativeFunction))]
        public static int StaticCall(lua_State L) => Call(L);
        [AOT.MonoPInvokeCallback(typeof(LuaNativeFunction))]
        public static int Call(lua_State L)
        {         
            try
            {
                RefAction a = ToLightObject<RefAction>(L, lua_upvalueindex(1), false);
                a();
                return 0;
            }
            catch (Exception e)
            {
                return luaL_error(L, e.Message);
            }
        }
    }

<# for(int i= 0; i< typeList.Length ; i ++){ #>
    public struct RefActionCaller<<# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#><#if(j != i)#>, <#}#>> where T1 : struct
    {
        [AOT.MonoPInvokeCallback(typeof(LuaNativeFunction))]
        public static int Call(lua_State L) => Call(L, 1);
        [AOT.MonoPInvokeCallback(typeof(LuaNativeFunction))]
        public static int StaticCall(lua_State L) => Call(L, 2);

        static int Call(lua_State L, int start)
        {
            try
            {
                var a = ToLightObject<RefAction<<# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#><#if(j != i)#>, <#}#>>>(L, lua_upvalueindex(1), false);
<# for(int j= 1; j <= i ; j ++){#>
                Get(L, <#=j#> + start, out <#=typeList[j]#> <#=typeList[j].ToLower()#>);
<#}#>
                a(<# for(int j= 0; j <= i ; j ++){#><#if(j == 0){#>ref SharpObject.GetValue<<#=typeList[j]#>>(L, <#=j#> + start)<#if(j != i)#>, <#}else{#><#=typeList[j].ToLower()#><#if(j != i)#>, <#}}#>);
                return 0;
            }
            catch (Exception e)
            {
                return luaL_error(L, e.Message);
            }
        }
    }

<# }#>

}
