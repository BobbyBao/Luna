<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# var typeList = new string [] {"T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8"}; #>
using System;
using System.Reflection;

namespace SharpLuna
{
    using static Lua;

    public struct FuncCaller<R>
    {
        public static int StaticCall(LuaState L) => Call(L);
        public static int Call(LuaState L)
        {         
            try
            {
                var a = L.ToLightObject<Func<R>>(lua_upvalueindex(1), false);
                var r = a();
                Lua.Push(L, r);
                return 1;
            }
            catch (Exception e)
            {
                return luaL_error(L, e.Message);
            }
        }
    }

<# for(int i= 0; i< typeList.Length ; i ++){ #>
    public struct FuncCaller<<# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#>, <#}#>R>
    {
        public static int Call(LuaState L) => Call(L, 1);
        public static int StaticCall(LuaState L) => Call(L, 2);

        static int Call(LuaState L, int start)
        {
            try
            {
                var a = L.ToLightObject<Func<<# for(int j= 0; j <= i ; j ++){#><#=typeList[j]#>, <#}#>R>>(lua_upvalueindex(1), false);
                var r = a(
<# for(int j= 0; j <= i ; j ++){#>
                    Lua.Get<<#=typeList[j]#>>(L, <#=j#> + start)<#if(j != i)#>,
<#}#>

                );
                Lua.Push(L, r);
                return 1;
            }
            catch (Exception e)
            {
                return luaL_error(L, e.Message);
            }
        }
    }

<# }#>

}
