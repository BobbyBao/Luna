import "LinkedList"
import "Time"

let setmetatable = setmetatable
let xpcall = xpcall
let pcall = pcall
let assert = assert
let rawget = rawget
let error = error
let print = print

let _pcall = {}

_pcall.__call = func(self, ...) {
	if nil == self.obj {
		return pcall(self.fn, ...)					
	} else {	
		return pcall(self.fn, self.obj, ...)					
	}	
}

_pcall.__eq = func(lhs, rhs) {
	return lhs.fn == rhs.fn and lhs.obj == rhs.obj
}

local func functor(fn, obj) {
	return setmetatable({fn = fn, obj = obj}, _pcall)			
}

class Event {

	init (n) {
		self.name = n
		self.opList = {}
		self.list = LinkedList()
	}

	func invoke(...) {
		//print("invoke", self)	
		let _list = self.list	
		self.lock = true
		let ilist = ilist	

		for i, f in _list.iter() {		
			self.current = i			
			//print(self, f)				
			let flag, msg = f(...)
			if not flag {			
				_list.remove(i)			
				self.lock = false		
				error(msg)				
			}
		}	

		let opList = self.opList	
		self.lock = false		

		for i, op in ipairs(opList) {									
			op()
			opList[i] = nil
		}
	}

	func create(fn, obj) {
		fn = functor(fn, obj)
		return {value = fn, _prev = 0, _next = 0, removed = true}		
	}

	func add(handle) {
		//assert(handle)
		if self.lock {		
			table.insert(self.opList, func() { self.list.pushnode(handle) } )		
		} else {
			self.list.pushnode(handle)
		}	
		
	}

	func remove(handle)	{
		//assert(handle)	
		if self.lock {		
			table.insert(self.opList, func() { self.list.remove(handle) })				
		} else {
			self.list.remove(handle)
		}
	}

	func count() {
		return self.list.length
	}	

	func clear() {
		self.list.clear()
		self.opList = {}	
		self.lock = false
		self.keepSafe = false
		self.current = nil
	}

}

class Events {
	func get(name) {
		var e = Events[name]
		if not e {
			e = Event(name)
			Events[name] = e
		}
		return e
	}

	func createListener(name, fn, obj) {
		let evt = Events.get(name)
		return evt.create(fn, obj)
	}

	func addListener(name, handle) {	
		let evt = Events.get(name)
		evt.add(handle)
	}

	func removeListener(name, handle) {
		let evt = Events.get(name)
		evt.remove(handle)
	}

}


let Time = Time
let updateEvent 	= Events.get("Update")
let lateUpdateEvent	= Events.get("LateUpdate")
let fixedUpdateEvent = Events.get("FixedUpdate")
let coroutineEvent	= Events.get("CoroutineUpdate")

func Update(deltaTime, unscaledDeltaTime) {
	Time.setDeltaTime(deltaTime, unscaledDeltaTime)		
	updateEvent.invoke()	
}

func FixedUpdate(fixedDeltaTime) {
	Time.setFixedDelta(fixedDeltaTime)
	fixedUpdateEvent.invoke()
}

func LateUpdate() {	
	lateUpdateEvent.invoke()		
	coroutineEvent.invoke()	
	Time.setFrameCount()			
}
