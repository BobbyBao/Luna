
let unpack = unpack or table.unpack

class Generator {
	var move_end = {}

	init(fn, ...) {
		let params = {...}
	    self.w_func = func() {
            fn(unpack(params))
            return Generator.move_end
        }

		self.reset()
	}

    func moveNext() {
		self.current = self.coro()
		if self.current == Generator.move_end {
			self.current = nil
			return false
		} else {
			return true
		}
	}

    func reset() {
		self.coro = coroutine.wrap(self.w_func)	
    }
}

func coroutine.start(...) {
    return luna.startCoroutine(Generator(...))
}

func cwait(param, ...) {
	if type(param) =="function" {
		coroutine.yield(coroutine.start(param, ...))
	} else {
		coroutine.yield(param, ...)
	}
}

func coroutine.call(fn) {
    return func(...) {
        local co = coroutine.create(fn)
        assert(coroutine.resume(co, ...))
    }
}

func coroutine.stop(c) {
    luna.stopCoroutine(c)
}

func coroutine.async_wait(async_func, callback_pos) {
    return func(...) {
        let _co = coroutine.running() or error ('this function must be run in coroutine')
        var rets
        var waiting = false
        local func cb_func(...) {
            if waiting {
                assert(coroutine.resume(_co, ...))
            } else {
                rets = {...}
            }
        }
        let params = {...}
        table.insert(params, callback_pos or (#params + 1), cb_func)
        async_func(unpack(params))
        if rets == nil {
            waiting = true
            rets = {coroutine.yield()}
        }
        
        return unpack(rets)
    }
}
