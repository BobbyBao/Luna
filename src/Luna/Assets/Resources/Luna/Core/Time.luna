let rawget = rawget
let uTime = UnityEngine.Time

var _Time = 
{	
	deltaTime			= 0,
	fixedDeltaTime 	 	= 0,
	maximumDeltaTime	= 0.3333333,
	fixedTime			= 0,
	frameCount			= 1,	
	realtimeSinceStartup= 0,
	time 				= 0,
	timeScale			= 1,
	timeSinceLevelLoad	= 0,
	unscaledDeltaTime	= 0,	
	unscaledTime		= 0,	
}

var _set = {}

func _set.fixedDeltaTime(v) {
	_Time.fixedDeltaTime = v
	uTime.fixedDeltaTime = v
}

func _set.maximumDeltaTime(v) {
	_Time.maximumDeltaTime = v
	uTime.maximumDeltaTime = v
}

func _set.timeScale(v) {
	_Time.timeScale = v
	uTime.timeScale = v
}

func _set.captureFramerate(v) {
	_Time.captureFramerate = v
	uTime.captureFramerate = v
}

func _set.timeSinceLevelLoad(v) {
	_Time.timeSinceLevelLoad = v
}

_Time.__index = func(t, k) {
	let v = rawget(_Time, k)
	
	if v {
		return v
	}

	return uTime.__index(uTime, k)	
}

_Time.__newindex = func(t, k, v) {
	let fn = rawget(_set, k)

	if fn {
		return fn(v)
	}

	error(string.format("Property or indexer `UnityEngine.Time.%s' cannot be assigned to (it is read only)", k))	
}

var counter = 1

class Time {

	func SetDeltaTime(deltaTime, unscaledDeltaTime) {
		let _Time = _Time
		_Time.deltaTime = deltaTime	
		_Time.unscaledDeltaTime = unscaledDeltaTime
		counter = counter - 1

		if counter == 0 and uTime {	
			_Time.time = uTime.time
			_Time.timeSinceLevelLoad = uTime.timeSinceLevelLoad
			_Time.unscaledTime = uTime.unscaledTime
			_Time.realtimeSinceStartup = uTime.realtimeSinceStartup
			_Time.frameCount = uTime.frameCount
			counter = 1000000
		} else {
			_Time.time = _Time.time + deltaTime
			_Time.realtimeSinceStartup = _Time.realtimeSinceStartup + unscaledDeltaTime
			_Time.timeSinceLevelLoad = _Time.timeSinceLevelLoad + deltaTime	
			_Time.unscaledTime = _Time.unscaledTime + unscaledDeltaTime 
		}		
	}

	func SetFixedDelta(fixedDeltaTime)	{
		_Time.deltaTime = fixedDeltaTime
		_Time.fixedDeltaTime = fixedDeltaTime

		_Time.fixedTime = _Time.fixedTime + fixedDeltaTime
	}

	func SetFrameCount() {
		_Time.frameCount = _Time.frameCount + 1
	}

	func SetTimeScale(scale) {
		let last = _Time.timeScale
		_Time.timeScale = scale
		uTime.timeScale = scale
		return last
	}

}

UnityEngine.Time = Time
setmetatable(Time, _Time)

if uTime != nil {
	_Time.maximumDeltaTime = uTime.maximumDeltaTime	
	_Time.timeScale = uTime.timeScale	
}
