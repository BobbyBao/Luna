import "Behaviour"

class UIPanel : Behaviour {
    var gameObject = nil
    var uiFile = nil
    var loaded = false

    init(n, uiFile) {
        super.init(n)
        self.uiFile = uiFile
        self.gameObject = nil
        self.eventObjects = {}
    }

    func addClickByName(name, clickFn) {
        var child = LunaHelper.FindChild(self.gameObject, name)
        self.eventObjects[child] = 1
        LunaHelper.AddClick(child, clickFn, self)
        return child
    }

    func addClick(child, clickFn) {
        self.eventObjects[child] = 1
        LunaHelper.AddClick(child, clickFn, self)
    }
    
    func removeEvent(child, evtFn) {
        LunaHelper.RemoveAction(child, evtFn)
    }

    func removeAllEvent(child) {
        LunaHelper.RemoveAction(child, nil)
    }

    func removeAllEvents() {
        for k, _ in pairs(self.eventObjects) {
            LunaHelper.RemoveAction(k, nil)
            table.remove(self.eventObjects, k)
        }
    }

    func remove(evtFn) {
        LunaHelper.RemoveAction(self, evtFn)
    }

    func enter() {
    
        if self.gameObject == nil {
            self.state = BehaviourState.Transiting
            UIManager.Instance.OpenPanel(self.uiFile, func(go)  { 
                self.gameObject = go

                if self.state == BehaviourState.Transiting {
                    self.gameObject.SetActive(true)

                    if !self.loaded {
                        self.onLoad(go)
                        self.loaded = true
                    }
                    
                    self.onOpen()
                    self.state = BehaviourState.Open
                }
                else if self.state == BehaviourState.Closed {
                    self.gameObject.SetActive(false)
                }

            })
        }
        else {
            
            if !self.loaded {
                self.onLoad(go)
                self.loaded = true
            }

            self.onOpen()
            self.state = BehaviourState.Open
        }

    }

    func exit() {  

        if self.gameObject != nil {  
            self.gameObject.SetActive(false)    
        }

        self.onClose()
        self.state = BehaviourState.Closed
    }

    func onLoad(go) {      
    }

    func onOpen() {
    }

    func onClose() {
    }

	func shutdown() {
        removeAllEvents()
	}


}