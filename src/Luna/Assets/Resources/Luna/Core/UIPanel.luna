import "Behavior"

class UIPanel : Behavior {
    var gameObject = nil
    var uiFile = nil
    var loaded = false

    init(n, uiFile) {
        super.init(n)
        self.uiFile = uiFile
        self.gameObject = nil
        self.eventObjects = {}
    }

    func addClickByName(name, clickFn) {
        var child = LunaHelper.FindChild(self.gameObject, name)
        if child {
            self.addClick(child, clickFn)
        }

        return child
    }

    func addClick(child, clickFn) {
        self.eventObjects[child] = 1
        LunaHelper.AddClick(child, clickFn, self)
    }
    
    func removeListener(evtFn, child) {
        var obj = child or self.gameObject
        LunaHelper.RemoveAction(obj, evtFn)
    }

    func removeAllListener(child) {
        LunaHelper.RemoveAction(child, nil)
    }

    func removeAllListeners() {
        for k, _ in pairs(self.eventObjects) {
            LunaHelper.RemoveAction(k, nil)
            table.remove(self.eventObjects, k)
        }
    }

    func show() {
        if self.parent {
            self.parent.activate(self)
        }
    }

    func hide() {
        if self.parent {
            self.parent.deactivate(self)
        }
    }

    func enter() {
    
        if self.gameObject == nil {
            self.state = BehaviorState.Transiting
            UIManager.Instance.OpenPanel(self.uiFile, func(go)  { 
                self.gameObject = go
                if self.state == BehaviorState.Transiting {
                    self.gameObject.SetActive(true)

                    if !self.loaded {
                        self.onLoad(go)
                        self.loaded = true
                    }
                    
                    self.onOpen()
                    self.state = BehaviorState.Open
                }
                else if self.state == BehaviorState.Closed {
                    self.gameObject.SetActive(false)
                }

            })
        } else {
            
            if !self.loaded {
                self.onLoad(go)
                self.loaded = true
            }
            
            self.gameObject.SetActive(true)
            self.onOpen()
            self.state = BehaviorState.Open
        }

    }

    func exit() {  

        if self.gameObject != nil {  
            self.gameObject.SetActive(false)    
        }

        self.onClose()
        self.state = BehaviourState.Closed
    }

    func onLoad(go) {      
    }

    func onOpen() {
    }

    func onClose() {
    }

	func shutdown() {
        removeAllEvents()
	}


}