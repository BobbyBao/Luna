
let GameObject = UnityEngine.GameObject

func test1(transform) {
	var t = os.clock()
	
	for i = 1,200000 {
		transform.position = transform.position
	}
	
	t = os.clock() - t
	print("Transform.position lua cost time: ", t)	
}

func test2(transform) {		
	var up = Vector3.up
	var t = os.clock()

	for i = 1,200000 {
		transform.Rotate(up, 1)	
	}
	
	t = os.clock() - t
	print("Transform.Rotate lua cost time: ", t)	
}

func test3() {
	var t = os.clock()
	var New = Vector3.__call
	
	for i = 1, 200000 {
		var v = New(i, i, i)		
	}
		
	t = os.clock() - t
	print("Vector3.New lua cost time: ", t)	
}

func test4() {	

	var t = os.clock()
    var go = GameObject()	
    let node = go.transform

	for i = 1,100000 {		
        //go = GameObject()
		go = node.gameObject				
	}
	
	t = os.clock() - t
	print("TestIndex luna cost time: ", t)	
}

func test5() {	
	let t = os.clock()
	let GameObject = UnityEngine.GameObject
	let SkinnedMeshRenderer = UnityEngine.SkinnedMeshRenderer
	let tp = typeof(SkinnedMeshRenderer)

	for i = 1,20000 {				
		let go = GameObject()
		go.AddComponent(tp)
    	local c = go.GetComponent(tp)
    	c.shadowCastingMode = 0
    	c.receiveShadows = false
	}
		
	print("Test5 lua cost time: ", os.clock() - t)	
}

func test6() {	
	let t = os.clock()
	let Input = UnityEngine.Input

	for i = 1,200000 {		
		//let t = Input.GetTouch(0)		
		let p = Input.mousePosition
		//Physics.RayCast
	}
		
	print("lua cost time: ", os.clock() - t)	
}

func test7() {	
	let Vector3 = Vector3	
	let t = os.clock()
		
	for i = 1, 200000 {
		let v = Vector3(i,i,i)
		Vector3.Normalize(v)
	}
		
	print("lua Vector3 New Normalize cost time: ", os.clock() - t)	
}

func test8() {		
	let Quaternion = Quaternion
	let t = os.clock()
	
	for i = 1,200000 {
		let q1 = Quaternion.Euler(i, i, i)		
		let q2 = Quaternion.Euler(i * 2, i * 2, i * 2)
		Quaternion.Slerp(Quaternion.identity, q1, 0.5)		
	}
		
	print("Quaternion Euler Slerp const: ", os.clock() - t)		
}

func test9() {
	var total = 0
	var t = os.clock()

	for i = 0, 1000000 {
		total = total + i - (i/2) * (i + 3) / (i + 5)
	}

	print("math cal cost: ", os.clock() - t)		
}

func testTable() {
	var array = {}

	for i = 1, 1024 {
		array[i] = i
	}

	var total = 0
	var t = os.clock()
		
	for j = 1, 100000 {
		for i = 1, 1024 {
			total = total + array[i]
		}			
	}
		
	print("Array cost time: ", os.clock() - t)	
}


//test4()
//test9() 
//testTable()