
func coroutine.call(fn) {
    return func(...) {
        //print("coroutine.call")
        let co = coroutine.create(fn)
        //print("coroutine.call", co)
        coroutine.resume(co, ...)
    }
}

func coroutine.async_wait(async_func, callback_pos) {
    return func(...) {
        print("async_wait")
        let _co = coroutine.running() or error ('this function must be run in coroutine')
        var rets
        var waiting = false
        local func cb_func(...) {
            print("async_wait", "cb_func", waiting)
            if waiting {
                print("async_wait", "cb_func")
                coroutine.resume(_co, ...)
            } else {
                rets = {...}
            }
        }
        let params = {...}
        table.insert(params, callback_pos or (#params + 1), cb_func)
        //print("async_wait", unpack(params))
        async_func(unpack(params))
        if rets == nil {
            waiting = true
            rets = {coroutine.yield()}
        }
        
        return unpack(rets)
    }
}


let sync_alert = coroutine.async_wait(UIManager.ShowAlertBox)
let sync_confirm = coroutine.async_wait(UIManager.ShowConfirmBox) 

class message_box  {
    func alert(message, title) {
        print('alert...', message, tittle)
		sync_alert(UIManager, message, title)
    }
	
	func confirm(message, title) {
        print('confirm...')
		let ret = sync_confirm(UIManager, message, title)
		return ret == true
    }
}

local func async_recharge(num, cb) {
    print('requst server...')
    cb(true, num)
}

let recharge = coroutine.async_wait(async_recharge)

let buy = func() {
    message_box.alert("您余额不足，请充值！", "余额提醒")
    if message_box.confirm("确认充值10元吗？", "确认框") {
        print('recharging...')
        let r1, r2 = recharge(10)
        print('recharge result:', r1, r2)
        message_box.alert("充值成功！", "提示")
    } else {
        print('cancel')
        message_box.alert("取消充值！", "提示")
    }

    print('recharge finished')
}


self.gameObject.Find("Button").GetComponent("Button").onClick.AddListener(coroutine.call(buy))
